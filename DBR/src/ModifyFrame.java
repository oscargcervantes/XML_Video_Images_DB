import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import edu.lsivc.db.DBR;
import edu.lsivc.directory.Directory;
import edu.lsivc.xml.XMLFile;
import org.w3c.dom.*;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ModifyFrame.java
 *
 * Created on Aug 17, 2011, 6:37:26 PM
 */
//package xmldbr;

/**
 *
 * @author oscargcervantes
 */
public class ModifyFrame extends javax.swing.JFrame 
{
	/**
	 * @uml.property  name="dbdir"
	 */
	private String  dbdir;
	/**
	 * @uml.property  name="personaIndex"
	 */
	private String PersonaIndex;
	/**
	 * @uml.property  name="settingsdir"
	 */
	private String settingsdir;
	/**
	 * @uml.property  name="i"
	 */
	private int i = 0;
	/**
	 * @uml.property  name="dB"
	 */
	private String DB = "DBGR";
    /**
	 * @uml.property  name="iD"
	 */
    private String ID = "1";
    /**
	 * @uml.property  name="xmlfiledir"
	 */
    private String xmlfiledir;
    /**
	 * @uml.property  name="gaitXMLDirs" multiplicity="(0 -1)" dimension="1"
	 */
    private String[] GaitXMLDirs;
    /**
	 * @uml.property  name="faceXMLDirs" multiplicity="(0 -1)" dimension="1"
	 */
    private String[] FaceXMLDirs;
    /**
	 * @uml.property  name="gaitAttr" multiplicity="(0 -1)" dimension="2"
	 */
    private String[][] GaitAttr;
    /**
	 * @uml.property  name="faceAttr" multiplicity="(0 -1)" dimension="2"
	 */
    private String[][] FaceAttr;
    /**
	 * @uml.property  name="gaitElements" multiplicity="(0 -1)" dimension="2"
	 */
    private String[][] GaitElements;
    /**
	 * @uml.property  name="faceElements" multiplicity="(0 -1)" dimension="2"
	 */
    private String[][] FaceElements;
    /**
	 * @uml.property  name="model"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private DefaultTableModel model = new DefaultTableModel();
    private static int column;
    private static int row;
    /**
	 * @uml.property  name="xml"
	 * @uml.associationEnd  
	 */
    private XMLFile xml;
    /**
	 * @uml.property  name="value"
	 */
    private String Value = " ";
	
    /** Creates new form ModifyFrame */
    public ModifyFrame() 
    {
        initComponents();
        //LoadDirs();
        //LoadIndex();
        DBR db = new DBR();
        this.dbdir = db.GetDBDir();
        this.settingsdir = db.GetSettingsDir(this.dbdir);
        this.PersonaIndex = db.LoadIndex(this.settingsdir);
        if(!PersonaIndex.contentEquals("0"))
        {
          for(int i=1;i<=Integer.valueOf(PersonaIndex);i++)
          {	  
        	IDComboBox.addItem(String.valueOf(i)); //Leer el archivo index de la base de datos para ver cuantas personas existen. Cargar ese numero en el ComboBox	
          }
        }
      //Add XMLTable configuration.
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IDComboBox = new javax.swing.JComboBox();
        DBComboBox = new javax.swing.JComboBox();
        IDLabel = new javax.swing.JLabel();
        DBLabel = new javax.swing.JLabel();
        //jScrollPane1 = new javax.swing.JScrollPane();
        XMLTable = new javax.swing.JTable(model);
        SaveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Modify Database");
        //setAlwaysOnTop(true);
        setName("ModifyFrame"); // NOI18N
        setResizable(true);

        IDComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        IDComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDComboBoxActionPerformed(evt);
            }
        });

        DBComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        DBComboBox.addItem("DBFR");
        DBComboBox.addItem("DBGR");
        DBComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBComboBoxActionPerformed(evt);
            }
        });

        IDLabel.setText("ID");

        DBLabel.setText("DB");
        
        XMLTable.getTableHeader().setReorderingAllowed(false);
        JTableHeader header = XMLTable.getTableHeader();
        header.setBackground(Color.yellow);
        XMLTable.getTableHeader().setResizingAllowed(true);
        XMLTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                XMLTablePropertyChange(evt);
            }
        });
        XMLTable.addMouseListener(new MouseAdapter() 
        {
           public void mouseClicked(MouseEvent e) 
           {
              int fila = XMLTable.rowAtPoint(e.getPoint());
              int columna = XMLTable.columnAtPoint(e.getPoint());
              row = fila;
              column = columna;
              if ((fila > -1) && (columna > -1))
                 System.out.println(XMLTable.getValueAt(fila,columna) + " " + fila + " " + columna);
              System.out.println(XMLTable.getColumnName(columna));
              System.out.println("Columns: " +  XMLTable.getColumnCount() + " Rows: " + XMLTable.getRowCount());
              Value = XMLTable.getValueAt(fila,columna).toString();
           }
        });
        //jScrollPane1.setViewportView(XMLTable);
        jScrollPane1 = new javax.swing.JScrollPane(XMLTable);
        XMLTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        SaveButton.setText("Save");
        SaveButton.setEnabled(false);
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(IDLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(IDComboBox, 0, 112, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(DBLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(DBComboBox, 0, 113, Short.MAX_VALUE)
                            .addGap(395, 395, 395)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DBComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IDLabel)
                    .addComponent(DBLabel))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_SaveButtonActionPerformed

private void XMLTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_XMLTablePropertyChange
// TODO add your handling code here:
	//XMLTable.get
	System.out.println("Event performed" + " " + "row: " + row + " " + "column: " + column);	
	if(!(model.getColumnCount() == 0))
	{
	 if(!Value.contentEquals(XMLTable.getValueAt(row,column).toString()))	
	 {	
	  System.out.println(XMLTable.getValueAt(row,column));
	  System.out.println(XMLTable.getColumnName(column));
	  if(DB.contentEquals("DBGR"))
	  {			
	    System.out.println(GaitXMLDirs[row]);
	    xml = new XMLFile(GaitXMLDirs[row]);
	    if(!XMLTable.getColumnName(column).contentEquals("URL"))
	    {
		   Document doc = xml.Update("ID", ID, XMLTable.getColumnName(column), XMLTable.getValueAt(row,column).toString());
	       if(doc!=null)
	       {
		    xml.WriteResultFile(doc);  
	       }
	    }	   
	   }
	   if(DB.contentEquals("DBFR"))
	   {			
	    System.out.println(FaceXMLDirs[row]);
	    xml = new XMLFile(FaceXMLDirs[row]);
	    if(!XMLTable.getColumnName(column).contentEquals("URL"))
	    {
	     Document doc = xml.Update("ID", ID, XMLTable.getColumnName(column), XMLTable.getValueAt(row,column).toString());
	     if(doc!=null)
	     {
		   xml.WriteResultFile(doc);  
	     }
	    } 
	  }
	 }
   }
}//GEN-LAST:event_XMLTablePropertyChange

private void IDComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDComboBoxActionPerformed
// TODO add your handling code here:
   ID = IDComboBox.getSelectedItem().toString();
   System.out.println(ID);
   xmlfiledir = dbdir + DB + File.separator + "P" + ID + File.separator;
   LoadInfo();	
}//GEN-LAST:event_IDComboBoxActionPerformed

private void DBComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBComboBoxActionPerformed
// TODO add your handling code here:
	DB = DBComboBox.getSelectedItem().toString();
	System.out.println(DB);
	xmlfiledir = dbdir + DB + File.separator + "P" + ID + File.separator;
	LoadInfo();
}//GEN-LAST:event_DBComboBoxActionPerformed

/*private void LoadIndex()
{
	try
    {
     FileInputStream fstream = new FileInputStream(settingsdir + ".Index.index");
     DataInputStream in = new DataInputStream(fstream);
     BufferedReader br = new BufferedReader(new InputStreamReader(in));
     String strLine;

     while ((strLine = br.readLine()) != null)   
     {
       PersonaIndex = strLine;
      }
     fstream.close();
     br.close();
     in.close();
     }
	catch(Exception e)
	{
      System.out.println("Error Settings dir not found");	
	 }	
}*/

/*private void LoadDirs()
{
	try
    {		
	 FileInputStream fstream = new FileInputStream(System.getProperty("user.home") + File.separator + ".dbr");
     DataInputStream in = new DataInputStream(fstream);
     BufferedReader br = new BufferedReader(new InputStreamReader(in));
     String strLine;
    
	 while ((strLine = br.readLine()) != null)   
	 {
	    dbdir = strLine;
	  }
     in.close();
     settingsdir = dbdir + ".Settings" + File.separator;
     System.out.println(settingsdir);
     }
    catch(Exception e)
    {
  	System.out.println(e.getMessage());  
     }	
}*/

private void LoadInfo()
{
	Directory deletedir = new Directory(xmlfiledir);
	deletedir.Delete(".filteredfiles.txt");
	Directory vidir = new Directory(xmlfiledir,".xml");
	File file = new File(xmlfiledir);
	vidir.Read(file);
	
	model.getDataVector().removeAllElements();
	model.setColumnCount(0);
	
	if(DB.contentEquals("DBGR"))
	{			
	 //GaitXMLDirs = GetXMLDirs();
	 DBR db = new DBR(); //Creates an instance of DBR class
	 GaitXMLDirs = db.GetXMLDirs(xmlfiledir); 
	 for(int k=0;k<GaitXMLDirs.length;k++)
	 {
	   XMLFile xml = new XMLFile(GaitXMLDirs[k]);
	   GaitElements = xml.GetElements();
	   String[] Els = new String[GaitElements[0].length];
	   for(int i=0;i<GaitElements.length;i++)
	   {	 
		 for(int j=0;j<GaitElements[0].length;j++)
	     {
	  	   Els[j] = GaitElements[i][j];
	  	   //System.out.println(Els[j]);
	  	   System.out.println(model.getColumnCount());
	  	   System.out.println(Els.length);
	  	   if(/*!(model.getColumnCount() == Els.length) ||*/ (model.getColumnCount() < Els.length))
	  	   {	   
	  	     //if(!Els[j].contentEquals("URL"))
	  	     //{	 
	  		   model.addColumn(Els[j]);
	  	      //}
	  	    }
	      }
	    }
	   GaitAttr = xml.Read(Els);
	   int urlindex = xml.GetElementIndex("URL", GaitElements);
	   String[] Attr= new String[GaitAttr[0].length];
	   for(int i=0;i<GaitAttr.length;i++)
	   {	 
		 for(int j=0;j<GaitAttr[0].length;j++)
	     {
	  	   //if(j==urlindex)
	  	   //{	   
			 Attr[j] = GaitAttr[i][j];
	  	   //}
	      }
	    }
	   model.addRow(Attr);
	  }
	}
	else if(DB.contentEquals("DBFR"))
	{	
	 //FaceXMLDirs = GetXMLDirs();
	 DBR db = new DBR(); //Creates an instance of DBR class
	 FaceXMLDirs = db.GetXMLDirs(xmlfiledir); 
	 for(int k=0;k<FaceXMLDirs.length;k++)
	 {
	   XMLFile xml = new XMLFile(FaceXMLDirs[k]);
	   FaceElements = xml.GetElements();
	   String[] Els = new String[FaceElements[0].length];
	   for(int i=0;i<FaceElements.length;i++)
	   {	 
		 for(int j=0;j<FaceElements[0].length;j++)
	     {
	  	   Els[j] = FaceElements[i][j];
	  	   if(/*!(model.getColumnCount() == Els.length)*/(model.getColumnCount() < Els.length))
	  	   {	   
	  	     model.addColumn(Els[j]);
	  	    }
	      }
	    }
	   FaceAttr = xml.Read(Els);
	   String[] Attr= new String[FaceAttr[0].length];
	   for(int i=0;i<FaceAttr.length;i++)
	   {	 
		 for(int j=0;j<FaceAttr[0].length;j++)
	     {
	  	   Attr[j] = FaceAttr[i][j];
	      }
	    }
	   model.addRow(Attr);
	  }
	}
		
}

/*public String[] GetXMLDirs()
{ 
 try
 {
   int count = 0;
   FileInputStream fstream = new FileInputStream(xmlfiledir + ".filteredfiles.txt");
   DataInputStream in = new DataInputStream(fstream);
   BufferedReader br = new BufferedReader(new InputStreamReader(in));
   String strLine;
   
   while ((strLine = br.readLine()) != null)   
   {
     count++;
    }
   
   System.gc();
   
   String[] Elms = new String[count];
   FileInputStream fs = new FileInputStream(xmlfiledir + ".filteredfiles.txt");
   DataInputStream i = new DataInputStream(fs);
   BufferedReader buffer = new BufferedReader(new InputStreamReader(i));
   count = 0;
   
   while ((strLine = buffer.readLine()) != null)   
   {
     Elms[count] = strLine;
     count++;
    }
   
   in.close();
   i.close();
   return Elms;
  }
  catch (Exception e)
  {
   System.err.println("Error: " + e.getMessage());
   return null;
   }
}*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
	 * @uml.property  name="dBComboBox"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JComboBox DBComboBox;
    /**
	 * @uml.property  name="dBLabel"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JLabel DBLabel;
    /**
	 * @uml.property  name="iDComboBox"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JComboBox IDComboBox;
    /**
	 * @uml.property  name="iDLabel"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JLabel IDLabel;
    /**
	 * @uml.property  name="saveButton"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JButton SaveButton;
    /**
	 * @uml.property  name="xMLTable"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JTable XMLTable;
    /**
	 * @uml.property  name="jScrollPane1"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
