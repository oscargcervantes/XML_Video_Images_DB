
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.StringTokenizer;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import org.apache.commons.io.FilenameUtils;
//import org.apache.commons.lang.StringUtils;

import edu.lsivc.db.DBR;
import edu.lsivc.directory.Directory;
import edu.lsivc.directory.FileChooser;
import edu.lsivc.directory.FileW;
import edu.lsivc.directory.Index_Elements;
//import edu.lsivc.directory.Persona;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * XMLDBFrame.java
 *
 * Created on Aug 13, 2011, 10:01:28 AM
 */
//package xmldbr;

/**
 *
 * @author oscargcervantes
 */
public class XMLDBFrame extends javax.swing.JFrame 
{
	/**
	 * @uml.property  name="confdir"
	 */
	private String confdir = null;
	/**
	 * @uml.property  name="dbdir"
	 */
	private String dbdir = null;
	//private static Object lock = new Object();
	/** Creates new form XMLDBFrame */
    public XMLDBFrame()
    {
    	this.confdir = System.getProperty("user.home") + File.separator + ".dbr";
    	File file = new File(confdir);
        if(file.exists())
        {	
    	  DBR db = new DBR(); //Creates an instance of DBR Class
          this.dbdir = db.GetDBDir();
        
          if(this.dbdir == null)
          {
            JOptionPane.showMessageDialog(null, "Select Database Directory");
            FileChooser chooser = new FileChooser();
            this.dbdir = chooser.Run();
            FileW filew = new FileW(confdir,dbdir);
            filew.Write();	
           }	
       // }
       //catch(Exception e)
       //{
        //System.out.println("Error dbdir not found");	
        //}
        }
      else
      {
       //JOptionPane.showMessageDialog(null, "Select Database Directory");
   	   //FileChooser chooser = new FileChooser();
   	   //dbdir = chooser.Run();
   	   JFileChooser ch = new JFileChooser();;
       String chtitle = "Select database directory";
       ch.setCurrentDirectory(new java.io.File("."));
       ch.setDialogTitle(chtitle);
       ch.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
       ch.setAcceptAllFileFilterUsed(false);
       if (ch.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) 
       {  
    	   this.dbdir = ch.getSelectedFile().getPath();
    	}
       else 
       {
    	   System.out.println("No Selection ");
    	}
       
       this.dbdir = dbdir + File.separator;
       
       FileW filew = new FileW(confdir,dbdir);
   	   filew.Write();
       } 	
       
       initComponents();
       
       DBR db = new DBR();
       String settingsdir = db.GetSettingsDir(dbdir);
       
       Index_Elements elmindx = new Index_Elements(dbdir,".Index.index", ".Elements.elms", ".DBInitialized.db", ".AllDirs", settingsdir);
  	
       boolean flag = elmindx.GetDBInit();
  	   
       if(flag)
  	   {	
  		  Insert.setEnabled(true);
  		  NewDB.setEnabled(false);
  		  View.setEnabled(true);
  		  Delete.setEnabled(true);
  		  Modify.setEnabled(true);
  		  Update.setEnabled(true);
  		  AddSession.setEnabled(true);
  	    }
  	   else
  	   {
  	     Start(dbdir);	
  	    }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
  
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        InitLabel = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        New = new javax.swing.JMenu();
        NewDB = new javax.swing.JMenuItem();
        Insert = new javax.swing.JMenuItem();
        Modify = new javax.swing.JMenuItem();
        View = new javax.swing.JMenuItem();
        Close = new javax.swing.JMenuItem();
        Delete = new javax.swing.JMenuItem();
        Update = new javax.swing.JMenuItem();
        AddSession = new javax.swing.JMenuItem();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LSIVC Database Management System");
        //this.setSize(600, 600);
        //InitLabel.setIcon(new javax.swing.ImageIcon(dbdir + File.separator + ".Images/biometrics.gif")); // NOI18N
        URL logoURL = this.getClass().getResource("/resources/next.jpg");
        ImageIcon logo = new ImageIcon(logoURL);
        InitLabel.setIcon(logo);
        New.setText("File");

        NewDB.setText("New");
        NewDB.setToolTipText("Creates new Database");
        NewDB.setName("NewDB"); // NOI18N
        NewDB.setOpaque(true);
        NewDB.addActionListener(new java.awt.event.ActionListener() 
        {
            public void actionPerformed(java.awt.event.ActionEvent evt) 
            {
                NewDBActionPerformed(evt);
            }
        });
        New.add(NewDB);

        Insert.setText("Insert");
        Insert.setEnabled(false);
        Insert.addActionListener(new java.awt.event.ActionListener() 
        {
            public void actionPerformed(java.awt.event.ActionEvent evt) 
            {
                InsertActionPerformed(evt);
            }
        });
        New.add(Insert);
        
        AddSession.setText("Add Session");
        AddSession.setEnabled(false);
        AddSession.addActionListener(new java.awt.event.ActionListener() 
        {
            public void actionPerformed(java.awt.event.ActionEvent evt) 
            {
                AddActionPerformed(evt);
            }
        });
        New.add(AddSession);
        
        Delete.setText("Delete");
        Delete.setToolTipText("Delete existing record in Data Base");
        Delete.setEnabled(false);
        Delete.addActionListener(new java.awt.event.ActionListener() 
        {
            public void actionPerformed(java.awt.event.ActionEvent evt) 
            {
                DeleteActionPerformed(evt);
            }
        });
        New.add(Delete);
        
        Update.setText("Update");
        Update.setToolTipText("Update existing record in Data Base");
        Update.setEnabled(false);
        Update.addActionListener(new java.awt.event.ActionListener() 
        {
            public void actionPerformed(java.awt.event.ActionEvent evt) 
            {
                UpdateActionPerformed(evt);
            }
        });
        New.add(Update);

        Modify.setText("Modify");
        Modify.setToolTipText("Insert a new Persona to Database");
        Modify.setEnabled(false);
        Modify.addActionListener(new java.awt.event.ActionListener() 
        {
            public void actionPerformed(java.awt.event.ActionEvent evt) 
            {
                ModifyActionPerformed(evt);
            }
        });
        New.add(Modify);

        View.setText("View");
        View.setToolTipText("View existing records in Database");
        View.setEnabled(false);
        View.addActionListener(new java.awt.event.ActionListener() 
        {
            public void actionPerformed(java.awt.event.ActionEvent evt) 
            {
                ViewActionPerformed(evt);
            }
        });
        New.add(View);

        Close.setText("Close");
        Close.setToolTipText("Close Application");
        Close.addActionListener(new java.awt.event.ActionListener() 
        {
            public void actionPerformed(java.awt.event.ActionEvent evt) 
            {
                CloseActionPerformed(evt);
            }
        });
        New.add(Close);

        MenuBar.add(New);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(InitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Start(String dbdir)
    {
  	  final String settingsdir = dbdir + ".Settings" + File.separator;
  	  Index_Elements elmindx = new Index_Elements(dbdir,".Index.index", ".Elements.elms", ".DBInitialized.db", ".AllDirs", settingsdir);
  	  boolean flag = elmindx.GetDBInit();
  	  if(flag)
  	  {
  		Insert.setEnabled(true);
  		View.setEnabled(true);
  		NewDB.setEnabled(false);
  		Delete.setEnabled(true);
		Modify.setEnabled(true);
		Update.setEnabled(true);
		AddSession.setEnabled(true);
  	   }
  	  else
  	  {
  		Insert.setEnabled(false);
  		NewDB.setEnabled(true);
  		View.setEnabled(false);
  		Delete.setEnabled(false);
		Modify.setEnabled(false);
		Update.setEnabled(false);
		AddSession.setEnabled(false);
  	   }	  
     }
  	
  	private void Insert(String dbdir) throws IOException
  	{
  		final String settingsdir = dbdir + ".Settings" + File.separator;
  		Index_Elements elm = new Index_Elements(dbdir,".Index.index", ".Elements.elms",".DBInitialized.db",".AllDirs", settingsdir);
  		boolean flag = elm.GetDBInit();
  		
  		if(flag)
  		{	
  	     //Call AttributesFrame and pass it the Attributes Array
			ElementsFrame elframe;
		    elframe = new ElementsFrame();
			elframe.setVisible(true);
  		}
  	   else
  	   {
  		 JOptionPane.showConfirmDialog(null, "Initialize DB first");   
  	    }
  	 }
  		
  	private void AddSession()
  	{
  		DBR db = new DBR();
  		String Dbdir = db.GetDBDir();
  		System.out.println("In development");	
  	 }
    
   private void NewDBActionPerformed(java.awt.event.ActionEvent evt)
   {//GEN-FIRST:event_NewDBActionPerformed
	 DBR db = new DBR();
	 db.Initialize(dbdir);
     Insert.setEnabled(true);
     NewDB.setEnabled(false);
	 View.setEnabled(true);
	 Delete.setEnabled(true);
	 Modify.setEnabled(true);
	 Update.setEnabled(true);
   }//GEN-LAST:event_NewDBActionPerformed

   private void ViewActionPerformed(java.awt.event.ActionEvent evt)
   {//GEN-FIRST:event_ViewActionPerformed
    ViewFrame frame = new ViewFrame();
    frame.setVisible(true);
   }//GEN-LAST:event_ViewActionPerformed

   private void ModifyActionPerformed(java.awt.event.ActionEvent evt)
   {//GEN-FIRST:event_ModifyActionPerformed
    ModifyFrame frame = new ModifyFrame();
    frame.setVisible(true);
   }//GEN-LAST:event_ModifyActionPerformed

   private void CloseActionPerformed(java.awt.event.ActionEvent evt)
   {//GEN-FIRST:event_CloseActionPerformed
    System.exit(0);
   }//GEN-LAST:event_CloseActionPerformed
   
   private void DeleteActionPerformed(java.awt.event.ActionEvent evt)
   {//GEN-FIRST:event_CloseActionPerformed
	JOptionPane.showMessageDialog(null, "Development in process");
   }//GEN-LAST:event_CloseActionPerformed
   
   private void UpdateActionPerformed(java.awt.event.ActionEvent evt)
   {//GEN-FIRST:event_CloseActionPerformed
    JOptionPane.showMessageDialog(null, "Development in process");
   }//GEN-LAST:event_CloseActionPerformed

   private void AddActionPerformed(java.awt.event.ActionEvent evt)
   {
    AddSession();
   }
   
   private void InsertActionPerformed(java.awt.event.ActionEvent evt)
   {//GEN-FIRST:event_InsertActionPerformed
	 try
	 { 
	  String dbInit = null;
	  FileInputStream fstream = new FileInputStream(dbdir + ".Settings/.AllDirs");
	  DataInputStream in = new DataInputStream(fstream);
	  BufferedReader br = new BufferedReader(new InputStreamReader(in));
	  dbInit = br.readLine();
	  in.close();
	  Insert(dbInit);
	 }
	 catch(Exception er)
	 {
	  JOptionPane.showConfirmDialog(null, "Error: " + er.getMessage()); 
	 }
   }//GEN-LAST:event_InsertActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
	 * @uml.property  name="close"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JMenuItem Close;
    /**
	 * @uml.property  name="delete"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JMenuItem Delete;
    private javax.swing.JMenuItem Update;
    /**
	 * @uml.property  name="initLabel"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JLabel InitLabel;
    /**
	 * @uml.property  name="insert"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JMenuItem Insert;
    /**
	 * @uml.property  name="menuBar"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JMenuBar MenuBar;
    /**
	 * @uml.property  name="modify"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JMenuItem Modify;
    /**
	 * @uml.property  name="new"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JMenu New;
    /**
	 * @uml.property  name="newDB"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JMenuItem NewDB;
    /**
	 * @uml.property  name="view"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JMenuItem View;
    private javax.swing.JMenuItem AddSession;
    // End of variables declaration//GEN-END:variables
}
