// WordNet Synonym Replacing Example//package wordnet;package edu.lsivc.analysis;import java.util.*;import net.didion.jwnl.*;import net.didion.jwnl.data.*;import net.didion.jwnl.data.relationship.*;import net.didion.jwnl.dictionary.Dictionary;public class SynReplace {    /**	 * @uml.property  name="synStr"	 */    private String SynStr;    /**	 * @uml.property  name="wdh"	 * @uml.associationEnd  multiplicity="(1 1)"	 */    private WordNetHelper wdh;    /**	 * @uml.property  name="newSentence"	 */    private String newSentence = "";        public SynReplace(String str) throws JWNLException     {        // Initialize the database        // You must configure the properties file to point to your dictionary files    	wdh = new WordNetHelper();        wdh.initialize("file_properties.xml");                SynStr = str;        //System.out.println(test2 + "\n\n");        String[] tokens = SynStr.split(" ");                // Walk through all tokens        for (int i = 0; i < tokens.length; i++)         {            // This will our replace word, if we don't find anything to replace it with            // we just use the same word            String newWord = "";            Stemmer st = new Stemmer();      	    String stem = st.Stem(tokens[i]);      	    	            // LookUp all IndexWords and store in an array            IndexWordSet set = Dictionary.getInstance().lookupAllIndexWords(tokens[i]);            IndexWord[] words = set.getIndexWordArray();            // Try to get a Synonym for any IndexWord, first come first serve!            for (int j = 0; j < words.length; j++)             {                String found = getSynonym(words[j]);                                // If we found something let's get out of here                if (found != null)                {                    newWord += found;                    //break;                }            }            // Rebuild new sentence            if(tokens[i].contentEquals(stem) && tokens[i].contentEquals(newWord))            {	              newSentence += tokens[i] + " ";            }            else if(tokens[i].contentEquals(newWord) && !tokens[i].contentEquals(stem))            {              newSentence += tokens[i] + " " + stem + " ";	            }            else if(!tokens[i].contentEquals(newWord) && tokens[i].contentEquals(stem))            {              newSentence += tokens[i] + " " + newWord;	            }	            else if(!tokens[i].contentEquals(stem) && !tokens[i].contentEquals(newWord))            {              newSentence += tokens[i] + " " + newWord + stem + " ";            }	                    }        System.out.println("\n\nHere is the revised paragraph: ");        System.out.println("\n" + newSentence);    }        public String ReturnPhrase()    {    	return newSentence;    }        public String getSynonym(IndexWord w) throws JWNLException {        // Use the helper class to get an ArrayList of similar Synsets for an IndexWord        String str = "";    	ArrayList a = wdh.getRelated(w,PointerType.SIMILAR_TO);        // As long as we have a non-empty ArrayList        if (a != null && !a.isEmpty())         {            System.out.println("Found a synonym for " + w.getLemma() + ".");            // Pick a random Synset            //int rand = (int) (Math.random() * a.size());            for(int j=0;j<a.size();j++)            {	              Synset s = (Synset) a.get(j);              // Pick a random Word from that Synset              Word[] words = s.getWords();              for(int i =0;i<words.length;i++)              {                str += words[i].getLemma() + " ";	              }            }            //return str;        }                ArrayList b = wdh.getRelated(w,PointerType.HYPERNYM);        // As long as we have a non-empty ArrayList        if (b != null && !b.isEmpty())         {            System.out.println("Found a hypernym for " + w.getLemma() + ".");            // Pick a random Synset            //int rand = (int) (Math.random() * a.size());            for(int j=0;j<b.size();j++)            {	              Synset s = (Synset) b.get(j);              // Pick a random Word from that Synset              Word[] words = s.getWords();              for(int i =0;i<words.length;i++)              {                str += words[i].getLemma() + " ";	              }            }            //return str;        }                ArrayList c = wdh.getRelated(w,PointerType.HYPONYM);        // As long as we have a non-empty ArrayList        if (c != null && !c.isEmpty())         {            System.out.println("Found a hyponym for " + w.getLemma() + ".");            // Pick a random Synset            //int rand = (int) (Math.random() * a.size());            for(int j=0;j<c.size();j++)            {	              Synset s = (Synset) c.get(j);              // Pick a random Word from that Synset              Word[] words = s.getWords();              for(int i =0;i<words.length;i++)              {                str += words[i].getLemma() + " ";	              }            }            //return str;        }                ArrayList d = wdh.getRelated(w,PointerType.ANTONYM);        // As long as we have a non-empty ArrayList        if (d != null && !d.isEmpty())         {            System.out.println("Found an antonym for " + w.getLemma() + ".");            // Pick a random Synset            //int rand = (int) (Math.random() * a.size());            for(int j=0;j<d.size();j++)            {	              Synset s = (Synset) d.get(j);              // Pick a random Word from that Synset              Word[] words = s.getWords();              for(int i =0;i<words.length;i++)              {                str += words[i].getLemma() + " ";	              }            }            //return str;        }                ArrayList e = wdh.getRelated(w,PointerType.MEMBER_MERONYM);        // As long as we have a non-empty ArrayList        if (e != null && !e.isEmpty())         {            System.out.println("Found an meronym for " + w.getLemma() + ".");            // Pick a random Synset            //int rand = (int) (Math.random() * a.size());            for(int j=0;j<e.size();j++)            {	              Synset s = (Synset) e.get(j);              // Pick a random Word from that Synset              Word[] words = s.getWords();              for(int i =0;i<words.length;i++)              {                str += words[i].getLemma() + " ";	              }            }            //return str;        }                ArrayList f = wdh.getRelated(w,PointerType.SEE_ALSO);        // As long as we have a non-empty ArrayList        if (f != null && !f.isEmpty())         {            System.out.println("Found an see also for " + w.getLemma() + ".");            // Pick a random Synset            //int rand = (int) (Math.random() * a.size());            for(int j=0;j<f.size();j++)            {	              Synset s = (Synset) f.get(j);              // Pick a random Word from that Synset              Word[] words = s.getWords();              for(int i =0;i<words.length;i++)              {                str += words[i].getLemma() + " ";	              }            }            //return str;        }                if(!str.contentEquals(""))        	{return str;}        else        {return null;}    }}